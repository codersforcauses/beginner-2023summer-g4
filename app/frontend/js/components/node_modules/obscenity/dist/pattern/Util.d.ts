import type { LiteralNode, Node, ParsedPattern } from './Nodes';
import type { SimpleNode } from './Simplifier';
export declare function potentiallyMatchesEmptyString(pattern: ParsedPattern): boolean;
export declare function compilePatternToRegExp(pattern: ParsedPattern): RegExp;
export declare function getRegExpStringForNode(node: Node): string;
export declare function computePatternMatchLength(nodes: SimpleNode[]): number;
export declare function groupByNodeType(nodes: SimpleNode[]): NodeGroup[];
export type NodeGroup = LiteralGroup | WildcardGroup;
export interface LiteralGroup {
    isLiteralGroup: true;
    literals: LiteralNode[];
}
export interface WildcardGroup {
    isLiteralGroup: false;
    wildcardCount: number;
}
